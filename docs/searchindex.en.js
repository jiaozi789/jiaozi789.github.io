var relearn_searchindex = [
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "liaomin416100569博客",
    "uri": "/docs/index.html"
  },
  {
    "breadcrumb": "liaomin416100569博客 \u003e 插件开发",
    "content": "VS Code 插件开发教程 概述 Visual Studio Code（简称 VS Code）是一款由 Microsoft 开发的开源轻量级编辑器，支持跨平台（Windows、macOS、Linux）。\n其最大的优势之一是强大的插件系统，开发者可以通过编写扩展（Extension）来增强 VS Code 的功能，比如支持新的编程语言、代码提示、调试器、界面主题等。\nVS Code 插件的主要原理是：\n插件运行在独立的进程（Extension Host）中，不会阻塞编辑器主线程。 插件通过 VS Code 提供的 API 与编辑器进行交互，比如注册命令、添加菜单、修改编辑器行为等。 插件开发语言主要是 TypeScript 或 JavaScript，并基于 Node.js 生态。 安装 VS Code 安装 打开 VS Code 官方下载页面。 选择对应操作系统（Windows、macOS 或 Linux）。 按提示进行安装，安装完成后可以通过 code 命令（需要在安装时勾选“添加到 PATH”）在命令行中启动 VS Code。 插件开发环境安装 插件开发需要以下工具：\nyo（Yeoman 脚手架工具） generator-code（VS Code 插件项目生成器） vsce（VS Code Extension CLI，用于打包和发布插件） 安装步骤：\n# 安装 yo 和 generator-code npm install -g yo generator-code # 安装 vsce npm install -g @vscode/vsce 开发 生成代码 使用 Yeoman 脚手架生成插件项目：\nyo code 执行后会有交互式提示，例如：\n选择插件类型（TypeScript / JavaScript） 插件名称 描述 初始化 Git 仓库等 生成完成后，项目目录大致结构如下：\nmy-extension/\r├── .vscode/ # VS Code 调试配置\r├── src/ # 插件源码\r│ └── extension.ts # 插件入口文件\r├── package.json # 插件描述文件，配置命令、激活事件、依赖等\r├── tsconfig.json # TypeScript 配置（如果是 TS 项目）\r└── README.md # 插件说明文档 package.json：插件的核心配置文件，用来描述插件元信息和扩展点。 extension.ts：插件入口文件，负责注册命令和功能。 package.json 核心配置 package.json 是插件的描述文件，控制插件如何被 VS Code 加载。主要字段：\n{\r\"name\": \"my-extension\",\r\"displayName\": \"My Extension\",\r\"description\": \"一个简单的 VS Code 插件示例\",\r\"version\": \"0.0.1\",\r\"publisher\": \"your-name\",\r\"engines\": {\r\"vscode\": \"^1.80.0\"\r},\r\"activationEvents\": [\r\"onCommand:extension.helloWorld\"\r],\r\"main\": \"./out/extension.js\",\r\"contributes\": {\r\"commands\": [\r{\r\"command\": \"extension.helloWorld\",\r\"title\": \"Hello World\"\r}\r]\r},\r\"scripts\": {\r\"vscode:prepublish\": \"npm run compile\",\r\"compile\": \"tsc -p ./\",\r\"watch\": \"tsc -watch -p ./\",\r\"test\": \"npm run compile \u0026\u0026 node ./out/test/runTest.js\"\r},\r\"devDependencies\": {\r\"typescript\": \"^5.0.0\",\r\"vscode\": \"^1.1.37\"\r}\r} 核心字段说明：\nname：插件的唯一 ID（发布后不可更改）。 displayName：VS Code Marketplace 上显示的名称。 version：插件版本。 publisher：发布者名称（需与 Marketplace 发布者一致）。 engines.vscode：兼容的 VS Code 版本范围。 activationEvents：触发插件激活的事件（如 onCommand、onLanguage、*）。 main：插件的入口文件（一般是编译后的 extension.js）。 contributes：插件扩展点，例如命令、菜单、快捷键、配置等。 extension.ts 核心函数 extension.ts 是插件的入口文件，负责插件的生命周期和功能实现。\nimport * as vscode from 'vscode';\r/**\r* 插件被激活时调用\r* @param context 插件上下文对象，包含订阅、全局存储等\r*/\rexport function activate(context: vscode.ExtensionContext) {\rconsole.log('插件已激活！');\r// 注册命令\rlet disposable = vscode.commands.registerCommand('extension.helloWorld', () =\u003e {\rvscode.window.showInformationMessage('Hello World from My Extension!');\r});\r// 将命令注册到插件上下文，确保插件卸载时清理资源\rcontext.subscriptions.push(disposable);\r}\r/**\r* 插件被停用时调用\r* 通常用于清理资源、保存数据\r*/\rexport function deactivate() {} 核心点解释：\nactivate：插件激活时执行（如首次运行命令、打开特定文件类型）。 deactivate：插件停用时执行，用于清理资源。 vscode.commands.registerCommand：注册一个命令（命令 ID 必须和 package.json 中一致）。 vscode.window.showInformationMessage：在 VS Code 界面右下角弹出提示消息。 context.subscriptions：插件上下文，保存所有注册的资源，确保在插件停用时能正确释放。 Hello World 示例 编辑 src/extension.ts，添加一个最简单的命令： import * as vscode from 'vscode';\rexport function activate(context: vscode.ExtensionContext) {\rconsole.log('插件已激活！');\rlet disposable = vscode.commands.registerCommand('extension.helloWorld', () =\u003e {\rvscode.window.showInformationMessage('Hello World from My Extension!');\r});\rcontext.subscriptions.push(disposable);\r}\rexport function deactivate() {} 在 package.json 中配置命令： {\r\"contributes\": {\r\"commands\": [\r{\r\"command\": \"extension.helloWorld\",\r\"title\": \"Hello World\"\r}\r]\r}\r} 运行调试： 按 F5 启动调试，会打开一个新的 VS Code 窗口（Extension Development Host）。 打开命令面板（Ctrl+Shift+P / Cmd+Shift+P），输入并运行 Hello World。 会弹出消息 “Hello World from My Extension!\"。 拓展介绍 VS Code 插件 API 非常丰富，常见扩展能力包括：\n编辑器扩展：代码高亮、自动补全、格式化器。\nUI 扩展：状态栏、活动栏、侧边栏视图。\n调试扩展：调试适配器，用于支持新的调试语言。\n文件系统扩展：实现虚拟文件系统。\n常见配置示例（在 package.json 中添加）：\n1. 命令（Commands） 命令是最常见的扩展方式，用户可以在命令面板（Ctrl+Shift+P）或绑定快捷键来触发。\n配置（package.json）：\n{ \"contributes\": { \"commands\": [ { \"command\": \"extension.helloWorld\", \"title\": \"Hello World\" } ] } } 实现（extension.ts）：\nvscode.commands.registerCommand('extension.helloWorld', () =\u003e {\rvscode.window.showInformationMessage('Hello World!');\r}); 2. 菜单（Menus） 可以把命令挂载到编辑器右键菜单、资源管理器右键菜单等位置。\n配置（package.json）：\n{\r\"contributes\": {\r\"commands\": [\r{\r\"command\": \"extension.helloWorld\",\r\"title\": \"hello\"\r}，\r\"menus\": {\r\"editor/context\": [\r{\r\"command\": \"extension.helloWorld\",\r\"when\": \"editorLangId == javascript\",\r\"group\": \"navigation\"\r}\r]\r}\r}\r} 说明：\neditor/context 表示编辑器内右键菜单。 when 条件限制了命令只在 JavaScript 文件中出现。 group 决定菜单项分组（navigation = 导航相关）。 菜单本身没有名字，只能通过命令 title 来显示，菜单本省command会关联到commands的命令通过command的title显示菜单名称。 菜单位置由 menus 的 key 决定，比如：\n菜单位置 key:\r`editor/context` 编辑器右键菜单\r`editor/title` 编辑器标题栏按钮\r`editor/title/context` 编辑器标题栏右键菜单\r`explorer/context` 资源管理器右键菜单\r`commandPalette` 命令面板（Ctrl+Shift+P）\r`view/title` 视图面板标题栏按钮\r`scm/title` 版本控制标题栏按钮 3. 快捷键（Keybindings） 可以为命令绑定快捷键。\n配置（package.json）：\n{\r\"contributes\": {\r\"keybindings\": [\r{\r\"command\": \"extension.helloWorld\",\r\"key\": \"ctrl+alt+h\",\r\"when\": \"editorTextFocus\"\r}\r]\r}\r} 说明：\nkey：快捷键组合。 when：触发条件，这里是“编辑器有焦点时”。 4. 状态栏（Status Bar Items） 可以在底部状态栏添加一个按钮。\n实现（extension.ts）：\nlet statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);\rstatusBar.text = \"$(smiley) Hello\";\rstatusBar.command = \"extension.helloWorld\";\rstatusBar.show();\rcontext.subscriptions.push(statusBar); 说明：\ncreateStatusBarItem 用于创建状态栏元素。 text 可以包含图标（如 $(smiley)）。 command 绑定点击事件。 5. 侧边栏视图（Views） 可以在活动栏（左侧竖栏）添加一个自定义视图。\n配置（package.json）：\n{\r\"contributes\": {\r\"views\": {\r\"explorer\": [\r{\r\"id\": \"mySidebar\",\r\"name\": \"My Sidebar\"\r}\r]\r}\r}\r} 实现（extension.ts）：\nclass MyTreeDataProvider implements vscode.TreeDataProvider\u003cvscode.TreeItem\u003e {\rgetTreeItem(element: vscode.TreeItem): vscode.TreeItem {\rreturn element;\r}\rgetChildren(): vscode.TreeItem[] {\rreturn [\rnew vscode.TreeItem(\"Item 1\"),\rnew vscode.TreeItem(\"Item 2\")\r];\r}\r}\rvscode.window.registerTreeDataProvider(\"mySidebar\", new MyTreeDataProvider()); 说明：\n在 资源管理器面板 添加一个新视图 “My Sidebar”。\n用 TreeDataProvider 动态提供数据。\n6. 编辑器装饰（Decorations） 可以给代码添加背景色、高亮、提示信息等。\n实现（extension.ts）：\nconst decorationType = vscode.window.createTextEditorDecorationType({\rbackgroundColor: \"rgba(255,0,0,0.3)\"\r});\rconst editor = vscode.window.activeTextEditor;\rif (editor) {\rconst range = new vscode.Range(0, 0, 0, 5);\reditor.setDecorations(decorationType, [range]);\r} 说明：\ncreateTextEditorDecorationType 定义样式。 setDecorations 应用到代码范围。 7. 语言支持（Language Features） 可以扩展某种语言的代码补全、悬浮提示等。\n配置（package.json）：\n{\r\"contributes\": {\r\"languages\": [\r{\r\"id\": \"mylang\",\r\"aliases\": [\"MyLang\"],\r\"extensions\": [\".mlg\"],\r\"configuration\": \"./language-configuration.json\"\r}\r]\r}\r} 实现补全（extension.ts）：\nvscode.languages.registerCompletionItemProvider(\"mylang\", {\rprovideCompletionItems(document, position) {\rreturn [new vscode.CompletionItem(\"helloWorld\", vscode.CompletionItemKind.Keyword)];\r}\r}); 说明：\nlanguages 定义新语言（这里是 .mlg 后缀）。 registerCompletionItemProvider 提供自动补全。 8. 配置（Configuration） 插件可以在 VS Code 设置里增加配置项。\n配置（package.json）：\n{\r\"contributes\": {\r\"configuration\": {\r\"title\": \"My Extension\",\r\"properties\": {\r\"myExtension.enableFeature\": {\r\"type\": \"boolean\",\r\"default\": true,\r\"description\": \"是否启用我的功能\"\r},\r\"myExtension.apiEndpoint\": {\r\"type\": \"string\",\r\"default\": \"https://api.example.com\",\r\"description\": \"API 接口地址\"\r}\r}\r}\r}\r} 读取配置（extension.ts）：\nconst config = vscode.workspace.getConfiguration(\"myExtension\");\rconst enable = config.get(\"enableFeature\", true);\rconst api = config.get(\"apiEndpoint\", \"\"); 9. 文件系统监听（File System Watcher） 可以监听文件变化事件。\n实现（extension.ts）：\nconst watcher = vscode.workspace.createFileSystemWatcher(\"**/*.js\");\rwatcher.onDidChange(uri =\u003e console.log(\"修改: \" + uri.fsPath));\rwatcher.onDidCreate(uri =\u003e console.log(\"创建: \" + uri.fsPath));\rwatcher.onDidDelete(uri =\u003e console.log(\"删除: \" + uri.fsPath));\rcontext.subscriptions.push(watcher); 10. 任务（Tasks） 可以让插件在 VS Code 的“任务运行器”中提供任务。\n配置（package.json）：\n{\r\"contributes\": {\r\"taskDefinitions\": [\r{\r\"type\": \"myTask\",\r\"required\": [\"taskName\"],\r\"properties\": {\r\"taskName\": {\r\"type\": \"string\",\r\"description\": \"任务名称\"\r}\r}\r}\r]\r}\r} 实现（extension.ts）：\nvscode.tasks.registerTaskProvider(\"myTask\", {\rprovideTasks: () =\u003e {\rreturn [new vscode.Task(\r{ type: \"myTask\", taskName: \"sayHello\" },\rvscode.TaskScope.Workspace,\r\"sayHello\",\r\"myTask\",\rnew vscode.ShellExecution(\"echo Hello from task!\")\r)];\r},\rresolveTask: () =\u003e undefined\r}); 发布 打包插件 使用 vsce 打包插件：\n# 在插件项目根目录执行\rvsce package 执行成功后，会生成一个 .vsix 文件，例如：\nmy-extension-0.0.1.vsix 安装插件：\ncode --install-extension my-extension-0.0.1.vsix 或者到vscode插件中心右侧… install from vsix选择本地文件。 发布到 VS Code Marketplace 前往 Azure DevOps 创建 Publisher。\n使用 vsce login \u003cpublisher-name\u003e 登录，并输入 Personal Access Token。\n发布插件：\nvsce publish 或者指定版本号：\nvsce publish minor 发布成功后，你的插件就会出现在 Visual Studio Marketplace 上，供所有用户下载。",
    "description": "VS Code 插件开发教程 概述 Visual Studio Code（简称 VS Code）是一款由 Microsoft 开发的开源轻量级编辑器，支持跨平台（Windows、macOS、Linux）。\n其最大的优势之一是强大的插件系统，开发者可以通过编写扩展（Extension）来增强 VS Code 的功能，比如支持新的编程语言、代码提示、调试器、界面主题等。\nVS Code 插件的主要原理是：\n插件运行在独立的进程（Extension Host）中，不会阻塞编辑器主线程。 插件通过 VS Code 提供的 API 与编辑器进行交互，比如注册命令、添加菜单、修改编辑器行为等。 插件开发语言主要是 TypeScript 或 JavaScript，并基于 Node.js 生态。 安装 VS Code 安装 打开 VS Code 官方下载页面。 选择对应操作系统（Windows、macOS 或 Linux）。 按提示进行安装，安装完成后可以通过 code 命令（需要在安装时勾选“添加到 PATH”）在命令行中启动 VS Code。 插件开发环境安装 插件开发需要以下工具：\nyo（Yeoman 脚手架工具） generator-code（VS Code 插件项目生成器） vsce（VS Code Extension CLI，用于打包和发布插件） 安装步骤：\n# 安装 yo 和 generator-code npm install -g yo generator-code # 安装 vsce npm install -g @vscode/vsce 开发 生成代码 使用 Yeoman 脚手架生成插件项目：",
    "tags": [],
    "title": "vscode插件开发教程",
    "uri": "/docs/plugins/vscode/index.html"
  },
  {
    "breadcrumb": "liaomin416100569博客",
    "content": "插件开发 插件开发文档 插件使用主题：\nhttps://github.com/McShelby/hugo-theme-relearn https://github.com/88250/hugo-theme-archie 插件列表 插件列表",
    "description": "插件开发 插件开发文档 插件使用主题：\nhttps://github.com/McShelby/hugo-theme-relearn https://github.com/88250/hugo-theme-archie 插件列表 插件列表",
    "tags": [],
    "title": "插件开发",
    "uri": "/docs/plugins/index.html"
  },
  {
    "breadcrumb": "liaomin416100569博客",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/docs/categories/index.html"
  },
  {
    "breadcrumb": "liaomin416100569博客",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/docs/tags/index.html"
  }
]
